import numpy as np
from sklearn.svm import SVC
from k_fold_cv import k_fold_cross_validation  # Import custom k-fold function
import joblib  # For saving the best model

# Load preprocessed data
data = np.load("processed_data.npz")
X_train, y_train = data["X_train"], data["y_train"]

# Load C values from the file generated by generate_c_values.py
C_values = np.load("c_values.npy")

# k-Fold Cross-Validation (k between 5 and 10)
k = 5
C_scores = {}

print("Performing k-Fold Cross-Validation with our custom method...")

for C in C_values:
    model = SVC(kernel="linear", C=C)

    # Use our custom k-fold cross-validation
    mean_score, scores = k_fold_cross_validation(model, X_train, y_train, k=k)

    C_scores[C] = mean_score
    print(f"C={C:.6f}, Mean Accuracy={mean_score:.4f}")

# Select best C (highest mean accuracy)
best_C = max(C_scores, key=C_scores.get)
print(f"\nBest C value: {best_C}")

# Train final model using best C
final_model = SVC(kernel="linear", C=best_C)
final_model.fit(X_train, y_train)

# Save the trained model
joblib.dump(final_model, "best_svm_model.pkl")

print("\nTraining complete. Best model saved as 'best_svm_model.pkl'.")
